type Query {
    # 用户相关
    findUserByFuzzy(username: String!, page: Int = 0, pageSize: Int = 10): [User!]!
    findUserById(userIds: [String!]!): [User!]!

    # 赛事相关
    findMatchById(matchId: String!): Match
    findMatches(matchIds: [String!]!): [Match!]!

    # 参赛单位相关
    findUnitById(unitId: String!): Unit
    findUnits(unitIds: [String!]!): [Unit!]!
    # 比赛相关
    findGameById(gameId: String!): Game
    findGames(gameIds: [String!]!): [Game!]!
    # 轮次相关
    findRoundById(roundId: String!): Round
    findRounds(roundIds: [String!]!): [Round!]!

    # 全局相关
    listMatchTypes: [MatchType!]!
    listRoundGameStrategyTypes: [RoundGameStrategyType!]!
}

scalar Date

type User {
    userId: String!
    username: String!
    avatar: String
    gender: Gender!
    mobile: String
    email: String
    organizedMatches(page: Int = 0, pageSize: Int = 10): [Match!]!
    participatedMatches(page: Int = 0, pageSize: Int = 10): [Match!]!
    createdAt: Date!
}

enum Gender {
    MALE
    FEMALE
    OTHER
    UNKNOWN
}

type Match {
    matchId: String!
    matchTypeId: String!
    organizerUser: User!
    name: String!
    description: String!
    targetGroup: String
    preview: String
    previewLarge: String
    participants: [User!]!
    referees: [User!]!
    comments(page: Int = 0, pageSize: Int = 10): [Comment!]!
    createdAt: Date!
}

type Unit {
    unitId: String!
    name: String
    creator: User!
    members: [User!]!
    match: Match!
    createdAt: Date!
}

type Game {
    gameId: String!
    status: GameStatus!
    unit0: User!
    unit1: User
    createdAt: Date!
    result: GameResult
}

enum GameStatus {
    NOT_START
    RUNNING
    WIN_FIRST
    WIN_SECOND
    DRAW
}

type GameResult {
    rounds: [GameRoundResult!]!
    result: GameFinalResult!
}

type GameRoundResult {
    score0: Int
    score1: Int
}

type GameFinalResult {
    winner: Int
    output0: Int
    output1: Int
}

type Round {
    roundId: String!
    name: String
    description: String
    status: RoundStatus!
    units: [Unit!]!
    games: [Game!]!
    createdAt: Date!
}

enum RoundStatus {
    NOT_START
    RUNNING
    FINISHED
    TERMINATED
}

type MatchType {
    matchTypeId: String!
    matchTypeName: String!
    matchScoreboardTypes: [ScoreboardInfo!]
}

type RoundGameStrategyType {
    strategyId: String!
    strategyName: String!
}

type ScoreboardInfo {
    scoreboardTypeId: String
    scoreboardTypeName: String
    configParameters: [ScoreboardConfigParameter!]
}

type ScoreboardConfigParameter {
    key: String
    displayName: String
    defaultValue: String
    required: Boolean
    fieldType: String
}

type Comment {
    issuer: User!
    content: String!
    reply: Comment
    createdAt: Date!
    updatedAt: Date!
}